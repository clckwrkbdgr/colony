- добавление профиля включить в добавление инстанции.
- спрайт для ячейки: загрузка из сценария.
- спрайт, возвращаемый миром, представить как структуру для разных уровней
  (трава(земля) - растение - животное).
- спрайты для каждого состояния (типа спать, есть, сонный)
- разные спрайты для ячеек (области или рандомно. скорее, второе).
- длительный сон для животного.
- прирост массы для растения.
- если цель умерла, найти другую цель.
- нужно серьезно подумать о создании класса Путь для инкапсуляции межячеечного
  пути к от начальной ячейки до целевой. Тогда можно просто запросить у Мира
  такой путь и следовать ему до достижения цели, а при ошибке пути просто
  требовать новый.
- движение - кратчайшие пути, обход препятствий и т.д.
- удаление с поля при смерти.
- размножение.
- нечеткое поведение.
- реестр перемещений (типа порядка действий в фолауте)
- карту представить не как матрицу, а как линейный массив, а два параметра все
  равно останутся и будут размерять.
- карту стандартизировать под различные тпы карт, но база есть матрица.
  в зависимости от этого поменять, скажем, измерение расстояний, нахождение
  соседей, перебор всех ячеек.

--------------------------------------------------------------------------------

05.12.2009
- freeNeighbours, вместо нее добавлен флаг в neighbours: bool freeOnly.
  new::neighbours(cell,false)==old::neighbours(cell)
  new::neighbours(cell,true)==old::freeNeighbours(cell).
+ В сценарий параметры карты - размеры, на правах свойств. По умолчанию = 1.
+ В конструктор карты передается не размеры карты, а полностью сценарий, а карта
  сама вычленяет все, что ей нужно.
- Мир при создании не получает больше карту, он сам ее создает по сценарию.

Пнд Окт 26 13:22:19 EET 2009
+ Функция Map::neighbours(Cell*), возвращающая список соседей заданной ячейки
  (как свободных, так и несвободных).
* Функция World::getRandNearbyCell() переведена на использование списков
  соседних ячеек.
- Map::cell(x,y)
+ Map::sprite(x,y) - единственный прямой доступ к координатной системе.
  возвращает спрайт. World::sprite просто вызывает ее.
* World и Map полностью переведены на исплользование соседних ячеек
+ Map::freeNeighbours - все свободные соседи.
* World::getStep работает так: получает список свободных соседей и шагает в
  ту, которая ближе всего к назначению.

Вск Окт 25 13:17:29 EET 2009
+ Конструкторы по умолчанию для профилей. Детали в мануале.
+ В профайлы добавлен protected символ CreatureType type; Устанавливается в
  конструкторе, доступ только r-o функцией classType().
+ Функция добавление профиля в Сценарии принимает указатель на профиль, создает
  в себе новый указатель (с проверкой типов), копирует его, и далее оперирует
  внутренними указателями. Класс Сценарий использует теперь д-линки.
= Теперь сценарий и профили независимы от внешной среды.
- Тип существа из инстанции, поскольку уже есть в профиле.
- Класс создания из формата сценария.

Пнд Окт 19 18:12:38 EEST 2009
Неделя проверки целостности и ошибок.
- Классу Ячейка ни к чему ссылка на родительскую карту. Убрал.
= Класс Ячейка без Карты суть бесполезность. Неопасно.
+ Вернул Ячейке ссылку на Карту: при перемещении Создания в новую ячейку не
  лишним будет отследить, чтобы ячейки были из одной карты.
= При создании Существа Мир и Ячейка могут не согласовываться, при этом Существо
  будет видеть мир таким, каким есть Мир, но принадлежать ячейке другой карты.
  При попытке перемещения с текущей неверной ячейки на новую (тоже, кстати, нет
  целостности - перемещение возможно только на ячейку с той же карты) Существо
  останется на той же карте - при вИдении пустоты ячейки она может быть
  заполнена другим существом.
= При копи-создании Существа от другого, первое наследует ячейку второго, и
  в итого при перемещении одного второе существо перестанет существовать для
  мира. Присваивание более целостно - при любой попытке воздействовать на мир
  все вернется на круги своя для того, кто наследован. Тот же, кто наследует,
  перенимет все свойства наследованного, но, при попытке переместить себя (как
  извне, так и изнутри) он вернется на старую Ячейку (принадлежать все же будет
  новому Миру).
~ Небольшие исправления в файлах Мира и его компонентов, в основном -
  отслеживание ошибок.

Вск Окт 18 19:46:42 EEST 2009
+ Функция очистки dumblist'а - List::clear().
+ Функция наглой очистки памяти, связанной с указателями нодов списка profiles:
  Scenario::clearProfiles();

Птн Окт 16 16:03:42 EEST 2009
- Функция CelL::unsettle - ибо нарушает целостность.
+ Функция Cell::moveDwellerTo() - как замена unsettle - перемещает dweller'а в
  новую ячейку, НО не уведомляет об этом dweller'а.
* Cell::moveDwellerTo и Creature::changeCell() - взаимно, и так, что вызов любой
  из них не нарушит целостности вообще ниразу:
  - Cell::moveDwellerTo: если перемещение невозможно (несвободная ячейка
  назначения, нулевое перемещение и т.д.), return false. В противном случае
  назначит новой ячейке своего жителя, а своего жителя обнулить, и вызвать
  у этого жителя функцию changeCell, которая (ибо жительство в ячейках взаимно
  изменено по сравнению с внутренней своей пропиской жителя) только лишь скажет
  жителю поменять свою внутреннюю прописку.
  - Creature::changeCell(): первое условие (с заменой своей прописки) при первом
  проходе не выполнится, зато вызовется moveDwellerTo, которая сделает возможным
  выполнение первого условия, и, собственно, вызовет его, вызвав changeCell.
  Т.о., житель довершит перемещение сменой своей прописки.
+ Конструкторы копирования и операторы = для Карты и Мира (используя д-линки).
+ Подсчет занятого/свободного места для карты при населении. Кроме того, карта и
  список, передаваемые в сценарий, должны быть пусты.
* Cell::settle вызывает в конце changeCell. Пофиксена целостность.
* Функция Map::getNearestPlant переделана в getNearestObject и принимает не
  только ячейку, но и спрайт, по которому фильтрует нужный объект.
+ Новый хедер worldtypes.h, который содержит общие типы: CreatureType и Sprite.
+ CreatureType {crCreature,crPlant,crAnimal}
+ Поле у Creature: classType типа CreatureType, для упрощенной классовой
  идентификации
* getNearestObject ищет по типу класса, а не по спрайту.

Вто Окт 13 21:24:46 EEST 2009
* Итератор списка выглядит как:
  - функция bool toStart() - просто ставит указатель в начало.
  - функция atEnd() - возвращает true, если итератор в конце списка.
  - функция T& next() - возвращает ссылку на следующий.
* World перешел на использование List вместо dynarray.
+ Класс Scenario:
  - функцией addProfile(CreatureProfile) заполняется список профилей.
  - функцией addInstance(CreatureType,profile,amount) заполняется список
	существ: тип существа, номер его профиля в списке и кол-во существ.
  - функция settleWorld(world,list,map) и заполняет list случайно
	позиционированными существами в согласии с instanses. Вызывается из
	конструктора World().
= Кастование профилей в заполнении мира сценария ниразу не работает - на деле
  каждый профиль является только лишь CreatureProfile.
- C++ - ГАВНО КАК О.О.-ЯЗЫК!
~ Исправлено гавно - сценарий теперь хранит не статическе профили, а указатели
  на них, соответственно кастование теперь лишь каст указателей, что верно и для
  чистого Си.
~ Попутно исправлен баг: животное, не найдя себе цели (еды), тем не менее
  пыталось определить расстояние до него - обращение к адресу 0.
= Слава богу, все ништяк :). C++ гавно о.о.-язык, но это все-таки Си.

Пнд Окт 12 21:41:45 EEST 2009
+ Модуль dumblist.h с классом List<T> - списком. Список умеет:
  - добавлять элемент в конец.
  - получать кол-во эл-тов.
  - получать i-тый элемент.
  - функциям T* first() и T* next() являет собой итератор.
  - кроме того, память являет собой д-линк: для каждого конструктора-копии
	дополнительная память не выделяется, увеличивается лишь счетчик экземпляров.
	Чтобы выделить новую память под список, нужно создать его пустым и заполнить
	вручную.

Вск Окт 11 15:55:43 EEST 2009
+ Поля get и dead для Hungry и Sleepy, заменяют соответственные
  макроопределения, т.е. макроопределения используются только в world::create.
- Убраны почти все макроопределения, кроме спрайтовых.
+ Профили классов - класс без методов, с одними полями в паблик-секции.
  Используется для упрощенной инициализации классов - вместо передачи всех
  классово-отличных параметров, создается такой профиль, в который все эти
  параметры заносятся, а каждому классу в конструктор передается только профиль.
  (Профили создаются для каждого класса и могут наследоваться - для каждого
  класса-наследника Creature создается класс-наследник CreatureProfile.)
  Позже, когда будет сделана загрузка из скриптов, загружать нужно будет только
  профиль.
+ Поле sprite разделил на два - aliveSprite и deadSprite, для живого состояния
  и мертвого, соответственного. Управление тем, какой из спрайтов показывать,
  переместил из World::sprite в Creature::sprite.
- Убрал макроопределения для спрайтов, теперь нет вообще.
* При ошибке спрайта возвращается не 0, а -1 (ибо индексы-таки с 0).
+ Для фатальных ошибок и др. сделал вывод на std::cerr.

Суб Окт 10 16:52:58 EEST 2009
+ Функция World::moveToTargetAndEat(), объединяющая в себе функции движения к
  еде издалека и поедании ее вблизи.
+ Функция Creature::changeCell(Cell), явно меняет родительскую ячейку на
  указанную (если она валидная и пустая, конечно) и через механизм
  заселения/выселения ячейки, и через подмену поля cell.
* За сим, функция Animal::moveTo() по сути не нужна, ибо является оберткой для
  вызова одной-единственной функции World::getStep(), а сама упомянутая функция
  использует вышеописанную changeCell() для низкоуровневой смены ячей; к тому
  же, ее смысл теперь более чист - она всего лишь и полностью перемещает
  создание на первую ячейку пути к цели.
+ Вернулся шаффл случайный для животного в функции Animal::shuffle(),
  которая пользуется также новой функцией World::getRandNearbyCell(Cell),
  которая находит соседнюю пустую ячейку случайно и возвращает ее, а если и не
  находит (к примеру, все вокруг ячейки заняты), то возвращает исходную обратно.
+ Функция Cell::isEmpty();
+ Карта и ее основные функции вынесены из World в собственный новый класс Map.
  Ячейка теперь родительствуется от Карты, а не от Мира, а мир имеет ссылку
  только на Карту. Создание же itself имеют ссылку и на Ячейку и на Мир -
  ибо Мир теперь обрабатывает чисто мировые или высокоуровнево-координатные
  дела, а низкоуровневые делает карта.
- Убрана куча ненужных свойство-методов, в т.ч.:
  - World::kill() - ибо просто (действительно излишняя) обертка.
  - Animal::moveToTargetAndEat и Animal::shuffle() - по той же причине.

Птн Окт  9 16:33:05 EEST 2009
+ Хедер world.h разобран на 4 соответственно классам: world, creature, plant,
  animal. Главным хедером для подключения является world.h
+ Класс Cell, инкапсулирующий ячейку. Содержит в себе, помимо указателя на
  существо, также свои координаты и ссылку на родительский мир. Имеет, помимо
  обычных r-o свойств, методы unsettle и settle, которые управляют заселением
  ячейки.
+ Все перемещение и позиционирование завязано на Cell, но само перемещение
  Animal в соседнюю ячейку при передаче параметром конечной цели не работает.
- Временно убран шаффл у Животного.
* Метод World::move(...) переименован в World::getStep(...) с сохранением списка
  и смысла параметров. Теперь этот метод вычисляет первый шаг в пути к целевой
  ячейке, и возвращает соответствующую ячейку. Этим пофиксен ужасно глупый
  недобаг. Пока, вроде бы, и Путь не нужен.
+ Функция World::randomCell() подбирает случайно пустую ячейку.

Чтв Окт  8 21:36:14 EEST 2009
= 4 модели (world.[1-4].h), первая компилируемая версия (world.5.{h,cpp}).
